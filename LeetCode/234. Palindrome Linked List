/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode * reverse(ListNode * head){
             ListNode *current = head;
             ListNode *prev = NULL;
             ListNode *right; 

            while(current != NULL){
                right = current->next;
                current->next = prev; 
                prev= current; 
                current = right; 
            }

            return prev; 

    }

    bool isPalindrome(ListNode* head) {
        // starting from ceil of  1 2 3 2 1 
        ListNode *fast = head;
        ListNode *slow = head; 
       
       while(fast !=NULL && fast->next !=NULL ){
           fast = fast->next->next;
           slow = slow->next;
       }

     ListNode* head2 = reverse(slow);

       
       while(head2 != NULL ){
           if(head->val != head2->val) return false;
           head = head->next;
           head2 = head2->next; 
       }
        return true; 
       

       


    }
};
